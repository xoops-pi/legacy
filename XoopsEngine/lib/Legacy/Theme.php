<?php
/**
 * Legacy theme handler
 *
 * You may not change or alter any portion of this comment or credits
 * of supporting developers from this source code or any supporting source code
 * which is considered copyrighted (c) material of the original comment or credit authors.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 * @copyright       Xoops Engine http://www.xoopsengine.org
 * @license         http://www.fsf.org/copyleft/gpl.html GNU public license
 * @author          Taiwen Jiang <phppp@users.sourceforge.net>
 * @since           3.0
 * @package         Xoops_Core
 * @version         $Id$
 */


class Legacy_Theme extends Legacy_Zend_Layout
{
   /**
    * The name of this theme
    * @var string
    */
    public $folderName = '';

   /**
    * Physical path of this theme folder
    * @var string
    */
    protected $path = '';
    protected $url = '';

   /**
    * Whether or not the theme engine should include the output generated by php
    * @var string
    */
    //protected $bufferOutput = true;

    /**
    * Canvas-level template to use
    * @var string
    */
    protected $canvasTemplate = 'theme.html';

    /**
    * Content-level template to use
    * @var string
    */
    protected $contentTemplate = '';

    protected $contentCacheLifetime = 0;
    protected $contentCacheId = null;

    /**
    * Text content to display right after the contentTemplate output
    * @var string
    */
    protected $content = '';

    /**
    * Page construction plug-ins to use
    * @var array
    * @access public
    */
    protected $plugins = array('pagebuilder' => 'Legacy_Pagebuilder');

    //protected $renderCount = 0;

    /**
     * Pointer to the theme template engine
     * @var XoopsTpl
     */
    public $template = false;

    /**
     * Array containing the document meta-information
     * @var array
     */
    protected $metas = array(
        'http' => array(
            'Content-Script-Type' => 'text/javascript',
            'Content-Style-Type' => 'text/css',
       ),
        'meta' => array(),
        'link' => array(),
        'script' => array(),
   );

    public function getTemplate()
    {
        return $this->template;
    }

    public function render($name = null)
    {
        $this->folderName = $this->theme;
        $this->path = Xoops::path('theme') . '/' . $this->folderName;
        $this->url = Xoops::path('url') . '/' . $this->folderName;
        $this->getView()->getEngine()->assign_by_ref('xoTheme', $this);
        return parent::render($name);
    }

    /**
     * Load localization information
     *
     * Folder structure for localization:
     *  <ul>themes/themefolder/english
     *      <li>main.php - language definitions</li>
     *      <li>style.css - localization stylesheet</li>
     *      <li>script.js - localization script</li>
     *  </ul>
     */
    function loadLocalization()
    {
        $language = Xoops::config('language');

        $this->addLanguage();
        $this->addScript("language/{$language}/script.js");
        $this->addStylesheet("language/{$language}/style.css");

        return true;
    }

    /**
     * Load theme specific language constants
     *
     * @param string    $type       language type, like 'main', 'admin'; Needs to be declared in theme xo-info.php
     * @param string    $language   specific language
     */
    function addLanguage($type = "main", $language = null)
    {
        return Xoops::service('translate')->loadTranslation($type, 'theme:' . $this->folderName, $language);
    }

    function addScript($src = '', $attributes = array(), $content = '')
    {
        $this->view->addScript($src, $attributes, $content);
        return;
    }

    /**
     * Add StyleSheet or CSS code to the document head
     * @param string $src path to .css file
     * @param array $attributes name => value paired array of attributes such as title
     * @param string $content CSS code to output between the <style> tags (in case $src is empty)
     *
     * @return void
     **/
    function addStylesheet($src = '', $attributes = array(), $content = '')
    {
        $this->view->addStylesheet($src, $attributes, $content);
        return;
    }

    /**
      * Add a <link> to the header
      * @param string    $rel        Relationship from the current doc to the anchored one
      * @param string    $href        URI of the anchored document
      * @param array        $attributes    Additional attributes to add to the <link> element
      */
    function addLink($rel, $href = '', $attributes = array())
    {
        $this->view->addLink($rel, $href, $attributes);
        return;
    }

    /**
     * Set a meta http-equiv value
     */
    function addHttpMeta($name, $value = null)
    {
        if (isset($value)) {
            return $this->addMeta('http', $name, $value);
        }
        unset($this->metas['http'][$name]);
    }

    /**
     * Change output page meta-information
     */
    function addMeta($type = 'meta', $name = '', $value = '')
    {
        $this->view->addMeta($type, $name, $value);
        return;
    }

    function headContent($params, $content, &$smarty, &$repeat)
    {
        if (!$repeat) {
            $this->htmlHeadStrings[] = $content;
        }
    }

    function renderMetas($type = null, $return = false)
    {
        $str = '';
        if (!isset($type)) {
            foreach (array_keys($this->metas) as $type) {
                $str .= $this->renderMetas($type, true);
            }
            $str .= implode("\n", $this->htmlHeadStrings);
        } else {
            switch ($type) {
            case 'script':
                foreach ($this->metas[$type] as $attrs) {
                    $str .= '<script' . $this->renderAttributes($attrs) . ">\n";
                    if (!empty($attrs['_'])) {
                        $str .= "\n//<![CDATA[\n" . $attrs['_'] . "\n//]]>";
                    }
                    $str .= "</script>\n";
                }
                break;
            case 'link':
                foreach ($this->metas[$type] as $rel => $attrs) {
                    $str .= '<link rel="' . $rel . '"' . $this->renderAttributes($attrs) . " />\n";
                }
                break;
            case 'stylesheet':
                foreach ($this->metas[$type] as $attrs) {
                    if (!empty($attrs['_'])) {
                        $str .= '<style' . $this->renderAttributes($attrs) . ">\n/* <![CDATA[ */\n" . $attrs['_'] . "\n/* //]]> */\n</style>";
                    } else {
                        $str .= '<link rel="stylesheet"' . $this->renderAttributes($attrs) . " />\n";
                    }
                }
                break;
            case 'http':
                foreach ($this->metas[$type] as $name => $content) {
                    $str .= '<meta http-equiv="' . htmlspecialchars($name, ENT_QUOTES) . '" content="' . htmlspecialchars($content, ENT_QUOTES) . "\" />\n";
                }
                break;
            default:
                foreach ($this->metas[$type] as $name => $content) {
                    $str .= '<meta name="' . htmlspecialchars($name, ENT_QUOTES) . '" content="' . htmlspecialchars($content, ENT_QUOTES) . "\" />\n";
                }
                break;
            }
        }
        if ($return) {
            return $str;
        }
        echo $str;
        return true;
    }

    /**
     * Generates a unique element ID
     * @param string $tagName
     * @return string
     */
    function genElementId($tagName = 'xos')
    {
        static $cache = array();
        if (!isset($cache[ $tagName ])) {
            $cache[$tagName] = 1;
        }
        return $tagName . '-' . $cache[$tagName]++;
    }

    /**
     * Transform an attributes collection to an XML string
     * @param array $coll
     * @return string
     */
    function renderAttributes($coll)
    {
        $str = '';
        foreach ($coll as $name => $val) {
            if ($name != '_') {
                $str .= ' ' . $name . '="' . htmlspecialchars($val, ENT_QUOTES) . '"';
            }
        }
        return $str;
    }
}